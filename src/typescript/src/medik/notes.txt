


obs -> pop -> symptom


Meeting Questions 
does data commons have medical data   
   - SIDER dataset 
   - Disease Ontology 

entire business model based on API to knowledge graph 
- several startups   
- "who is going to win schema wise" 


KEY thing: interoperability  with existing knowledge graphs 
- RDF  , ?neo4j 


key question: what interesting questions can you answer 

two philosophies 
   1) 
   - only thing in Edge is direction and relationship  
   - if you want something paired, you can make it a tuple as a property value

   data commons uses Schema.org | powers almost 40% of websites on internet 
   Classes define properties -> each instance has these properties  
      the properties have specified TYPES  
   RDF supports SQL queries  , SPARQL 


   look at the backend of disease ontology, snomed 
      - same format used for class properties 


   general AI and knowledge graph   

   Potential issues: 
      - scalability , runtime  | sql and sparql heavily optimized 

   2) neo4j | platofrom to build your graph on . Do not use RDF format, 


how appropriate would it be for medical diagnostics 
understand limitations of RDF structure 

Overall goal is to look at my graph architecture 

- ODA | https://omicsautomation.com/mypatient-360/ 

- look into centrality, used by social networks 
   - graph theory 
      - closeness, betweenness,  degree , eigenvector, pagerank 


      Subgraph -> aeverything within N degrees of an entity, and then do metric like centrality 

      Unsupervised -> many approproaches can be used with graphs ( representation learning) 
         - lab @ stanford working on this 




TODO 
- create functional query API 
   - DSL for specifying Paths, for example 
         start , (kind_of)* , symptom , cough
      would satisfy anything which has the symtom cough, or which descends from something which has 
      the symptom cough 



GENERAL 
/* 

Will have system for translating modifiers like
"most commonly" into numeric representation if wanted 



.mk file specification: 
    - the mk file is a medik knowledge file that defines a CONCEPT (vertex) 
       as well as the edges going OUT of it   (relations) 
    - it is parsed by a program defined in "mk_parser/parser.ts", which reads the text 
       file and converts mk into a format that can be input into the
       Medik knowledge graph (defined in "generic_graph/graph.ts")   

*/        



ID ALIASES 
/* 
   ID aliases are implemented via the graph API, and are defined in equivalencies.txt 


*/ 


VERTEX ATTRIBUTE 
/* 

    [Tue Apr  7 10:26:41 PDT 2020] 
    I think I have a relatively elegant solution to the vertex attribute problem 
    I realized that vertices with different attributes should not be treated as separate vertices
    This would make it hard to do searches which start at that vertice (concept) and go backwards, 
    because there would be many options to start from 

    Furthermore, the vertex "attributes" really are only valid in the context of the incoming edge. 
    Thus, it makes sense to store the vertex attributes within the edge metadata itself. 

    Thus, when a reverse vertex query is done the at
    atributes can be sought within the incoming edge 
    metadata, and used for the BFS  


    --> HOWEVER -->  
    	after implementing this i realized that it would be possible to have
	<cough | productive=true>   , and 
	<cough>  
	
	And have them be separate vertices, as long as when the former is created it links 
	back to cough with (kind_of) , and as long as the id is serialized differently. 
	
	Then, the reverse search would be done by starting at cough and following kind_of. 
	However, for now I think the aforementioned way (part of edge data) is what I will go with 
	as it seems to make the query API more straightforward 
	
*/ 




scratch 
/* 

Scratch Material: 

Discussion of human knowledge acquisition process
“The process of studying for a test gives a lot of introspective insights into AI - since you can observe yourself learn. One thing that is interesting is the idea of having a "working model/conceptualization" which you apply to solve problems. Anytime you recognize that a problem matches a particular topic/concept, then you load the working model for that concept into memory. Next, you use that to answer the question - if you get it correct then you reinforce the validity of that model. If you get it incorrect then you must search for modification to the model which would preserve its history of correct answers while also accommodating the new information. Often this is done with exceptions, such as - In general do not prescribe ASPIRIN to children with viral infection - unless they have kawasaki disease. Now - one interesting thing is - how does the update to the model actually occur. Well, lets say there is another instance in which you do not prescribe aspirin, in this case that category of modification already exists, so we just add (conj) to it. If the category does not exist then we must create it - and I am uncertain of at what level it should be created. We could either have an original model with a horizontal set of exceptions/modifications, OR we could have an original model, the addition of an exception which creates a new model, the addition of an exception to that which makes an even more abstract model... etc... And of course some combination of both. The difference is one of abstraction, implementation, and architecture and would likely have significant impacts on the ability of the AI to efficiently learn.” 



*/

